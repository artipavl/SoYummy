{"version":3,"file":"static/js/884.0128b9dc.chunk.js","mappings":"2RAgFA,EAvEqB,WACnB,OAA8BA,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,GAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAAkCN,EAAAA,EAAAA,UAAS,MAA3C,eAAOO,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,6FACnBR,GAAW,GADQ,mBAGES,EAAAA,EAAAA,IAAmBN,GAHrB,OAGXO,EAHW,OAIjBR,EAAcQ,EAAKC,SAEbC,EAAiBC,KAAKC,KAAKJ,EAAKK,MAAQ,IACzB,GACnBT,EAAaM,GARE,kDAWjBI,QAAQC,IAAR,MAXiB,yBAajBjB,GAAW,GAbM,6EAAH,qDAgBlBQ,GACD,GAAE,CAACL,IAEJ,IAAMe,EAAY,mCAAG,WAAMC,GAAN,iGAEXC,EAAAA,EAAAA,IAAqBD,GAFV,wBAGEV,EAAAA,EAAAA,IAAmBN,GAHrB,OAGXO,EAHW,OAIjBR,EAAcQ,EAAKC,QAJF,gDAMjBK,QAAQC,IAAR,MANiB,yDAAH,sDAelB,OACE,UAAC,KAAD,WACGlB,GACC,SAAC,KAAD,WACE,SAACsB,EAAA,EAAD,MAGoB,IAAtBpB,EAAWqB,QAAiBvB,GAcvB,SAAC,KAAD,0CAbHE,EAAWsB,KAAI,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,KAAMC,EAA/B,EAA+BA,MAAOC,EAAtC,EAAsCA,IAAtC,OACb,SAACC,EAAA,EAAD,CAEEL,YAAaA,EACbC,QAASA,EACTC,KAAMA,EACNC,MAAOA,EACPR,GAAIS,EACJV,aAAcA,EACdY,SAAS,QACTC,SAAS,UARJH,EAFM,IAelBvB,IACC,SAAC2B,EAAA,EAAD,CAAYC,UAAW5B,EAAWF,KAAMA,EAAM+B,OA7B/B,SAAAC,GACnB/B,EAAQ+B,EAAEC,SAAW,GACrBC,EAAAA,GAAAA,aACD,MA8BF,E,iDC/BD,EAtCiB,WACf,OAAsCvC,EAAAA,EAAAA,WAAS,GAA/C,eAAOwC,EAAP,KAAoBC,EAApB,KACA,GAA8BzC,EAAAA,EAAAA,WAAS,GAAvC,eAAO0C,EAAP,KAAgBC,EAAhB,KACMC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,KAEjCrC,EAAAA,EAAAA,YAAU,WACR,IAAMsC,EAAoBC,aAAaC,QAAQ,wBAC/CC,EAAAA,EAAAA,IAAkB,uBAClB,IAAIC,EAAY,KAQhB,OAPgB,OAAZP,QAAY,IAAZA,OAAA,EAAAA,EAAcQ,iBAAkB,IAAML,GAAqBL,IAC7DS,EAAYE,YAAW,WACrBZ,GAAe,GACfE,GAAW,GACXK,aAAaM,QAAQ,sBAAuB,OAC7C,GAAE,MAEE,WACLC,aAAaJ,EACd,CACF,GAAE,QAACP,QAAD,IAACA,OAAD,EAACA,EAAcQ,eAAgBV,IAIlC,OACE,UAAC,IAAD,WACGF,IACC,SAACgB,EAAA,EAAD,CACEC,KAAK,wDACLC,OAAQlB,EACRmB,QARiB,kBAAMlB,GAAe,EAArB,KAWrB,SAACmB,EAAA,EAAD,CAAWH,KAAK,cAChB,SAAC,EAAD,MAGL,C","sources":["components/FavoriteList/FavoriteList.js","pages/Favorite/Favorite.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { animateScroll as scroll } from 'react-scroll';\nimport { getFavoriteRecipes, deleteFavoriteRecipe } from 'api/index';\nimport MyRecipeItem from 'components/MyRecipeItem/MyRecipeItem';\nimport { Loader } from '../Loader/Loader';\nimport Pagination from '../Pagination/Pagination';\n\nimport { List, ListText, LoaderBox } from './FavoriteList.styled.js';\n\nconst FavoriteList = () => {\n  const [loading, setLoading] = useState(false);\n  const [allRecipes, setAllRecipes] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(null);\n\n  useEffect(() => {\n    const renderMovies = async () => {\n      setLoading(true);\n      try {\n        const data = await getFavoriteRecipes(page);\n        setAllRecipes(data.result);\n\n        const totalCountPage = Math.ceil(data.total / 4);\n        if (totalCountPage > 1) {\n          setTotalPage(totalCountPage);\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    renderMovies();\n  }, [page]);\n\n  const handelDelete = async id => {\n    try {\n      await deleteFavoriteRecipe(id);\n      const data = await getFavoriteRecipes(page);\n      setAllRecipes(data.result);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleChange = e => {\n    setPage(e.selected + 1);\n    scroll.scrollToTop();\n  };\n\n  return (\n    <List>\n      {loading ? (\n        <LoaderBox>\n          <Loader />\n        </LoaderBox>\n      ) : (\n        allRecipes.length !== 0 && !loading ? (\n          allRecipes.map(({ description, preview, time, title, _id }) => (\n            <MyRecipeItem\n              key={_id}\n              description={description}\n              preview={preview}\n              time={time}\n              title={title}\n              id={_id}\n              handelDelete={handelDelete}\n              styleDel=\"black\"\n              styleBtn=\"normal\"\n            />\n          ))\n        ) : (<ListText>You don't have your recipes</ListText>)\n      )}\n      {totalPage && (\n        <Pagination pageCount={totalPage} page={page} change={handleChange} />\n      )}\n    </List>\n  );\n};\n\nexport default FavoriteList;\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport FavoriteList from 'components/FavoriteList/FavoriteList';\nimport MainTitle from 'components/MainTitle/MainTitle';\nimport { Page } from './Favorite.styled';\nimport { Modal } from 'components/Modal/Modal';\nimport { selectorAchievements } from '../../redux/selectors';\n\nimport { checkLocalStorage } from 'utils';\nconst Favorite = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isFirst, setIsFirst] = useState(true);\n  const achievements = useSelector(selectorAchievements);\n\n  useEffect(() => {\n    const hasModalBeenShown = localStorage.getItem('modalFavoritesShown');\n    checkLocalStorage('modalFavoritesShown');\n    let timeoutId = null;\n    if (achievements?.favoritesCount >= 1 && !hasModalBeenShown && isFirst) {\n      timeoutId = setTimeout(() => {\n        setIsModalOpen(true);\n        setIsFirst(false);\n        localStorage.setItem('modalFavoritesShown', 'true');\n      }, 1000);\n    }\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [achievements?.favoritesCount, isFirst]);\n\n  const handleCloseModal = () => setIsModalOpen(false);\n\n  return (\n    <Page>\n      {isModalOpen && (\n        <Modal\n          text=\"You have created your first list of favorite recipes!\"\n          isOpen={isModalOpen}\n          onClose={handleCloseModal}\n        />\n      )}\n      <MainTitle text=\"Favorite\" />\n      <FavoriteList />\n    </Page>\n  );\n};\n\nexport default Favorite;\n"],"names":["useState","loading","setLoading","allRecipes","setAllRecipes","page","setPage","totalPage","setTotalPage","useEffect","renderMovies","getFavoriteRecipes","data","result","totalCountPage","Math","ceil","total","console","log","handelDelete","id","deleteFavoriteRecipe","Loader","length","map","description","preview","time","title","_id","MyRecipeItem","styleDel","styleBtn","Pagination","pageCount","change","e","selected","scroll","isModalOpen","setIsModalOpen","isFirst","setIsFirst","achievements","useSelector","selectorAchievements","hasModalBeenShown","localStorage","getItem","checkLocalStorage","timeoutId","favoritesCount","setTimeout","setItem","clearTimeout","Modal","text","isOpen","onClose","MainTitle"],"sourceRoot":""}